@page "/"

<PageTitle>Home</PageTitle>

<h1>Home</h1>
<CardGroup>
    <Card Class="mb-4" Style="width:18rem;">
        <CardBody>
            <CardTitle>About BeWell</CardTitle>
            <CardText>
                <p>This application is desgined to allow users to track their Nutrition, Sleep and Activity. </p>
                <p> By entering your data this application will allow you to keep up to date with your habits!</p>
            </CardText>
            <Button Color="ButtonColor.Primary" To="Account/Manage" Type="BlazorBootstrap.ButtonType.Link">Account</Button>
        </CardBody>
        <CardFooter>
            <small class=""text-muted">Last updated 3 mins ago</small>
        </CardFooter>
    </Card>
    <Card Class="mb-4" Style="width:18rem;">
        <CardBody>
            <CardTitle>How to use our application</CardTitle>
            <CardText>
                <p> Users should start by making a account with BeWell, this is because our application will be able to provide a more unique experience to your journey</p>
                <p>After you make an account you will be able to access the BeWell calandar where you can add your HONEST data into! It will display this data for you so it is easy to monitor and change at your leisure.</p>
            </CardText>
            <Button Color="ButtonColor.Primary" To="Account/Manage" Type="BlazorBootstrap.ButtonType.Link">Account</Button>
        </CardBody>
        <CardFooter>
            <small class="" text-muted">Last updated 3 mins ago</small>
        </CardFooter>
    </Card>
    <Card Class="mb-4" Style="width:18rem;">
        <CardBody>
            <CardTitle>The greatest wealth is HEALTH!</CardTitle>
            <CardText>
                <p>Healthly is an outfit that looks different on everyone.</p>
                <p>Rest time is as vital as your working time! </p>
                <p>BeWell syncs with your lifestyle and sends alerts when it's time to rest and when it's time to accomplish life.</p>
            </CardText>
            <Button Color="ButtonColor.Primary" To="Account/Manage" Type="BlazorBootstrap.ButtonType.Link">Account</Button>
        </CardBody>
            <CardFooter>
            <CardText Class=""text-muted">Last updated 3 mins ago</CardText>
            </CardFooter>
    </Card>
</CardGroup>
<div class="container-fluid">
    <div class="row">
        <div class="col-md-6 col-sm-12 p-4">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3">Clock</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1">
                Demonstrates using multiple pointers with RadzenRadialGauge.
            </RadzenText>
            <RadzenRadialGauge Style="width: 100%; height: 500px;">
                <RadzenRadialGaugeScale Step="1" Min="0" Max="12" StartAngle="0" EndAngle="360" ShowFirstTick="false"
                                        MinorStep=@minorStep
                                        TickLength="20"
                                        MinorTickLength="10"
                                        TickLabelOffset="40"
                                        TickPosition="GaugeTickPosition.Inside">
                    <RadzenRadialGaugeScalePointer Value=@hours Length="0.6" ShowValue="false" />
                    <RadzenRadialGaugeScalePointer Value=@seconds Length="0.9" Fill="red" Width="2" ShowValue="false" />
                    <RadzenRadialGaugeScalePointer Value=@minutes Length="0.8" ShowValue="false" />
                </RadzenRadialGaugeScale>
            </RadzenRadialGauge>
        </div>
        <div class="col-md-6 col-sm-12 p-4">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3">Activity</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1">
                Shows how to use multiple scales with RadzenArcGauge
            </RadzenText>
            <RadzenArcGauge @rendermode="@RenderMode.InteractiveServer" Style="width: 100%; height: 500px; background: #000">
                <RadzenArcGaugeScale Min="0" Max="520" StartAngle="0" EndAngle="360" Fill="rgba(249, 32, 99, 0.5)">
                    <RadzenArcGaugeScaleValue Value=@move Fill="rgb(249, 32, 99)">
                        <Template>
                            <svg width="100%" viewBox="0 0 240 120">
                                <text x="90" y="10" fill="#fff">
                                    Move <tspan fill="rgb(249, 32, 99)">@(Math.Round(move / 520 * 100))%</tspan>
                                </text>
                                <text x="90" y="28" fill="rgb(249, 32, 99)">
                                    @move/520 cal
                                </text>
                                <text x="90" y="50" fill="#fff">
                                    Exercise <tspan fill="rgb(203, 255, 0)">@(Math.Round(exercise / 30 * 100))%</tspan>
                                </text>
                                <text x="90" y="68" fill="rgb(203, 255, 0)">
                                    @exercise/30 min
                                </text>
                                <text x="90" y="88" fill="#fff">
                                    Stand <tspan fill="rgb(0, 253, 234)">@(Math.Round(stand / 12 * 100))%</tspan>
                                </text>
                                <text x="90" y="106" fill="rgb(0, 253, 234)">
                                    @stand/12 hr
                                </text>
                            </svg>
                        </Template>
                    </RadzenArcGaugeScaleValue>
                </RadzenArcGaugeScale>
                <RadzenArcGaugeScale Min="0" Max="30" StartAngle="0" EndAngle="360" Radius="0.8" Fill="rgba(203, 255, 0, 0.5)">
                    <RadzenArcGaugeScaleValue Value=@exercise Fill="rgb(203, 255, 0)" ShowValue="false" />
                </RadzenArcGaugeScale>
                <RadzenArcGaugeScale Min="0" Max="12" StartAngle="0" EndAngle="360" Radius="0.6" Fill="rgb(0, 253, 234, 0.5)">
                    <RadzenArcGaugeScaleValue Value=@stand Fill="rgb(0, 253, 234)" ShowValue="false" />
                </RadzenArcGaugeScale>
            </RadzenArcGauge>
        </div>
    </div>
</div>




<div class="container">
    <div class="row">
        <div class="col-sm-12 col-lg-4 my-lg-5 order-lg-last text-center text-lg-start">
            <p>
                <label><span class="d-block mt-3 mb-1">Value</span><RadzenSlider Min="0" Max="260" @bind-Value=@value Style="width: 200px;" /></label>
            </p>
            <p>
                <label><span class="d-block mt-3 mb-1">Tick position</span><RadzenDropDown @bind-Value=@tickPosition Data=@tickPositions Style="width: 200px;" /> </label>
            </p>
            <p>
                <label class="mt-3"><RadzenCheckBox @bind-Value=@showValue /> Show the pointer value</label>
            </p>
        </div>
        <div class="col-sm-12 col-lg-8 my-3 my-lg-5">
            <RadzenRadialGauge Style="width: 100%; height: 300px;">
                <RadzenRadialGaugeScale StartAngle="-150" EndAngle="150" Step="20" Min="0" Max="260" TickPosition=@tickPosition>
                    <RadzenRadialGaugeScalePointer Value="100" Length="0.6" ShowValue=@showValue>
                        <Template Context="pointer">
                            <h4>
                                @pointer.Value <sup>km/h</sup>
                            </h4>
                        </Template>
                    </RadzenRadialGaugeScalePointer>
                    <RadzenRadialGaugeScaleRange From="0" To="90" Fill="green" />
                    <RadzenRadialGaugeScaleRange From="90" To="140" Fill="orange" />
                    <RadzenRadialGaugeScaleRange From="140" To="260" Fill="red" />
                </RadzenRadialGaugeScale>
            </RadzenRadialGauge>
        </div>
    </div>
</div>

@code {
    bool showValue = true;
    double value = 100;
    IEnumerable<GaugeTickPosition> tickPositions = Enum.GetValues(typeof(GaugeTickPosition)).Cast<GaugeTickPosition>();
    GaugeTickPosition tickPosition = GaugeTickPosition.Inside;

    Timer timer;
    double hours;
    double minutes;
    double seconds;

    double minorStep = 12 / 60.0;

    double move = 338;
    double exercise = 2;
    double stand = 8;


    protected override void OnInitialized()
    {
        timer = new Timer(state =>
        {
            var now = DateTime.Now;

            hours = now.Hour % 12 + now.Minute / 60.0;

            minutes = now.Minute * minorStep + now.Second * 12 / 3600.0;
            seconds = now.Second * minorStep;

            InvokeAsync(StateHasChanged);
        }, null, 0, 1000);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    // Chart<double> barChart;

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         await HandleRedraw();
    //     }
    // }

    // async Task HandleRedraw()
    // {
    //     await barChart.Clear();

    //     await barChart.AddLabelsDatasetsAndUpdate(Labels, GetBarChartDataset());
    // }

    // private BarChartDataset<double> GetBarChartDataset()
    // {
    //     return new()
    //         {
    //             Label = "# of randoms",
    //             Data = RandomizeData(),
    //             BackgroundColor = backgroundColors,
    //             BorderColor = borderColors,
    //             BorderWidth = 1
    //         };
    // }

    // string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    // List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    // List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    // List<double> RandomizeData()
    // {
    //     var r = new Random(DateTime.Now.Millisecond);

    //     return new List<double> {
    //         r.Next( 3, 50 ) * r.NextDouble(),
    //         r.Next( 3, 50 ) * r.NextDouble(),
    //         r.Next( 3, 50 ) * r.NextDouble(),
    //         r.Next( 3, 50 ) * r.NextDouble(),
    //         r.Next( 3, 50 ) * r.NextDouble(),
    //         r.Next( 3, 50 ) * r.NextDouble() };
    // }

    // Task OnClicked(ChartMouseEventArgs e)
    // {
    //     var model = e.Model as BarChartModel;

    //     Console.WriteLine($"Handling event for {nameof(BarChartModel)}: x:{model.X} y:{model.Y}");
    //     return Task.CompletedTask;
    // }
}
